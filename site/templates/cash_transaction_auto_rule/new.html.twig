{% extends 'base.html.twig' %}
{% block title %}Новое автоправило{% endblock %}

{% block body %}
    <div class="page-header d-print-none">
        <div class="container-xl">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <h2 class="page-title">Новое автоправило</h2>
                </div>
            </div>
        </div>
    </div>
    <div class="container-xl mt-3">
        <div class="card">
            <div class="card-body">
                {{ form_start(form) }}
                {{ form_row(form.name) }}
                {{ form_row(form.action) }}
                {{ form_row(form.operationType) }}
                {{ form_row(form.cashflowCategory) }}
                <div class="mb-3">
                    <label class="form-label">Правила</label>
                    <div data-collection-holder data-prototype="{{ form_widget(form.conditions.vars.prototype)|e('html_attr') }}">
                        {% for cond in form.conditions %}
                            <div class="card mb-2">
                                <div class="card-body">
                                    {{ form_widget(cond) }}
                                    <button type="button" class="btn btn-sm btn-danger remove-item">Удалить</button>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                    <button type="button" class="btn btn-sm btn-secondary add_item_link mt-2">+ Правило</button>
                </div>
                <button class="btn btn-primary mt-3">Сохранить</button>
                {{ form_end(form) }}
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('[data-collection-holder]').forEach(function(collectionHolder) {
            const addButton = collectionHolder.parentElement.querySelector('.add_item_link');

            const initCondition = function(card) {
                const fieldSelect = card.querySelector('[id$="_field"]');
                const operatorSelect = card.querySelector('[id$="_operator"]');
                const operatorRow = card.querySelector('.condition-operator-row');
                const counterpartyRow = card.querySelector('.condition-counterparty-row');
                const valueRow = card.querySelector('.condition-value-row');
                const valueInput = valueRow ? valueRow.querySelector('input') : null;
                const valueToRow = card.querySelector('.condition-value-to-row');

                const update = function() {
                    const val = fieldSelect.value;
                    if (val === 'COUNTERPARTY') {
                        operatorRow.style.display = 'none';
                        operatorSelect.value = 'EQUAL';
                        counterpartyRow.style.display = '';
                        valueRow.style.display = 'none';
                        valueToRow.style.display = 'none';
                    } else if (val === 'COUNTERPARTY_NAME') {
                        operatorRow.style.display = 'none';
                        operatorSelect.value = 'CONTAINS';
                        counterpartyRow.style.display = 'none';
                        valueRow.style.display = '';
                        valueToRow.style.display = 'none';
                        if (valueInput) {
                            valueInput.removeAttribute('inputmode');
                            valueInput.oninput = null;
                        }
                    } else if (val === 'INN') {
                        operatorRow.style.display = 'none';
                        operatorSelect.value = 'CONTAINS';
                        counterpartyRow.style.display = 'none';
                        valueRow.style.display = '';
                        valueToRow.style.display = 'none';
                        if (valueInput) {
                            valueInput.setAttribute('inputmode', 'numeric');
                            valueInput.oninput = function() { this.value = this.value.replace(/\D/g, ''); };
                        }
                    } else if (val === 'DESCRIPTION') {
                        operatorRow.style.display = 'none';
                        operatorSelect.value = 'CONTAINS';
                        counterpartyRow.style.display = 'none';
                        valueRow.style.display = '';
                        valueToRow.style.display = 'none';
                        if (valueInput) {
                            valueInput.removeAttribute('inputmode');
                            valueInput.oninput = null;
                        }
                    } else {
                        operatorRow.style.display = '';
                        counterpartyRow.style.display = 'none';
                        valueRow.style.display = '';
                        valueToRow.style.display = '';
                        if (valueInput) {
                            valueInput.removeAttribute('inputmode');
                            valueInput.oninput = null;
                        }
                    }
                };

                fieldSelect.addEventListener('change', update);
                update();
            };

            addButton.addEventListener('click', function() {
                const prototype = collectionHolder.dataset.prototype;
                const index = collectionHolder.children.length;
                let newForm = prototype.replace(/__name__/g, index);
                const div = document.createElement('div');
                div.classList.add('card', 'mb-2');
                div.innerHTML = '<div class="card-body">' + newForm + '<button type="button" class="btn btn-sm btn-danger remove-item">Удалить</button></div>';
                collectionHolder.appendChild(div);
                initCondition(div);
            });

            collectionHolder.querySelectorAll('.card').forEach(initCondition);

            collectionHolder.addEventListener('click', function(e){
                if (e.target && e.target.classList.contains('remove-item')) {
                    e.target.closest('div.card').remove();
                }
            });
        });
    });
</script>
{% endblock %}
