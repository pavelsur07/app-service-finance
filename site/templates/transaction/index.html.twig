{% extends 'base.html.twig' %}
{% block title %}Транзакции (ДДС){% endblock %}

{% block breadcrumbs %}
    {% include 'partials/_breadcrumbs.html.twig' with {
        breadcrumbs: [
            {'label': 'Главная', 'path': 'app_home_index'},
            {'label': 'Финансы'},
            {'label': 'Транзакции', 'path': 'cash_transaction_index'}
        ]
    } %}
{% endblock %}

{% block content %}
<div class="d-flex align-items-center mb-3">
    <h2 class="page-title">Транзакции (ДДС)</h2>
    <div class="ms-auto d-print-none">
        <a href="{{ path('cash_transaction_new') }}" class="btn btn-primary">Добавить</a>
        <a href="{{ path('bank1c_import_form') }}" class="btn btn-outline-secondary">Импорт 1C</a>
        <a href="#" class="btn btn-outline-secondary">Экспорт</a>
        <form method="post" action="{{ path('cash_transaction_clear') }}" class="d-inline">
            <button type="submit" class="btn btn-outline-danger">Очистить</button>
        </form>
    </div>
</div>

{{ include('transaction/_filters.html.twig') }}

<div class="card mt-3">
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="sticky-top">
            <tr>
                <th>Дата</th>
                <th>Счет</th>
                <th class="text-end">Сумма</th>
                <th>Статья</th>
                <th>Контрагент</th>
                <th>Описание</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            {% for tx in transactions %}
                <tr>
                    <td>{{ tx.occurredAt|date('d.m.Y') }}</td>
                    <td>{{ tx.moneyAccount.name }}</td>
                    <td class="text-end"><span class="text-{{ tx.direction.value == 'INFLOW' ? 'success' : 'danger' }}">{{ tx.direction.value == 'INFLOW' ? '+' : '-' }}{{ tx.amount|number_format(2, ',', ' ') }} {{ tx.currency }}</span></td>
                    <td>
                        {{ tx.cashflowCategory ? tx.cashflowCategory.name : '' }}
                    </td>
                    <td>{{ tx.counterparty ? tx.counterparty.name : '' }}</td>
                    <td>{{ tx.description }}</td>
                    <td class="text-nowrap">
                        <a href="{{ path('cash_transaction_show', {id: tx.id}) }}" class="btn btn-sm btn-info">Просмотр</a>
                        <a href="{{ path('cash_transaction_edit', {id: tx.id}) }}" class="btn btn-sm btn-warning">Редактировать</a>
                        <button class="btn btn-sm btn-danger" data-bs-toggle="modal" data-bs-target="#delete-modal-{{ tx.id }}">Удалить</button>
                        {{ include('transaction/_delete_modal.html.twig', {tx: tx}) }}
                    </td>
                </tr>
            {% else %}
                <tr>
                    <td colspan="7" class="text-center text-muted">Нет транзакций</td>
                </tr>
            {% endfor %}
            </tbody>
        </table>
    </div>
</div>

{% include 'partials/_pagination.html.twig' with {pager: pager} %}

<div class="card mt-3">
    <div class="card-body">
        <div class="row mb-2">
            <div class="col">Приток</div>
            <div class="col text-end text-success">{{ summary.inflow|number_format(2, ',', ' ') }}</div>
        </div>
        <div class="row mb-2">
            <div class="col">Отток</div>
            <div class="col text-end text-danger">{{ summary.outflow|number_format(2, ',', ' ') }}</div>
        </div>
        <div class="row fw-bold">
            <div class="col">Баланс движения</div>
            <div class="col text-end">{{ summary.net|number_format(2, ',', ' ') }}</div>
        </div>
    </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
    {{ parent() }}
    <script>
        document.querySelectorAll('[data-period]').forEach(btn => {
            btn.addEventListener('click', function () {
                const from = document.querySelector('#filter_date_from');
                const to = document.querySelector('#filter_date_to');
                const now = new Date();
                let start = new Date(now);
                if (this.dataset.period === 'today') {
                    start = now;
                } else if (this.dataset.period === 'yesterday') {
                    start.setDate(start.getDate() - 1);
                    now.setDate(now.getDate() - 1);
                } else if (this.dataset.period === 'week') {
                    start.setDate(start.getDate() - start.getDay() + 1);
                } else if (this.dataset.period === 'month') {
                    start = new Date(now.getFullYear(), now.getMonth(), 1);
                }
                const fmt = d => d.toISOString().slice(0,10);
                from.value = fmt(start);
                to.value = fmt(now);
            });
        });
    </script>
{% endblock %}

