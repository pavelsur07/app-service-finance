<?php

namespace App\Command;

use App\Entity\Company;
use App\Entity\MoneyAccount;
use App\Service\Finance\DailyBalanceRecalculator;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Console\Attribute\AsCommand;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

#[AsCommand(
    name: 'app:daily-balance:recalc',
    description: 'Пересчёт дневных остатков по счетам за период'
)]
class RecalcDailyBalanceCommand extends Command
{
    public function __construct(
        private readonly EntityManagerInterface $em,
        private readonly DailyBalanceRecalculator $recalculator,
    ) {
        parent::__construct();
    }

    protected function configure(): void
    {
        $this
            ->addArgument('companyId', InputArgument::REQUIRED, 'ID компании (UUID)')
            ->addArgument('from', InputArgument::REQUIRED, 'Дата с (YYYY-MM-DD)')
            ->addArgument('to', InputArgument::REQUIRED, 'Дата по (YYYY-MM-DD)')
            ->addOption('accounts', null, InputOption::VALUE_OPTIONAL, 'Список ID счетов через запятую (если не задано — все счета компании)');
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $companyId = (string) $input->getArgument('companyId');
        $fromStr   = (string) $input->getArgument('from');
        $toStr     = (string) $input->getArgument('to');
        $accOpt    = (string) ($input->getOption('accounts') ?? '');

        try {
            $from = new \DateTimeImmutable($fromStr);
            $to   = new \DateTimeImmutable($toStr);
        } catch (\Throwable $e) {
            $output->writeln('<error>Неверный формат дат. Используйте YYYY-MM-DD.</error>');
            return Command::INVALID;
        }

        if ($from > $to) {
            [$from, $to] = [$to, $from];
        }

        /** @var Company|null $company */
        $company = $this->em->getRepository(Company::class)->find($companyId);
        if (!$company) {
            $output->writeln(sprintf('<error>Компания %s не найдена.</error>', $companyId));
            return Command::FAILURE;
        }

        $accountIds = null;
        if ('' !== trim($accOpt)) {
            $accountIds = array_values(array_filter(
                array_map('trim', explode(',', $accOpt)),
                static fn ($v) => $v !== ''
            ));
        } else {
            /** @var MoneyAccount[] $all */
            $all = $this->em->getRepository(MoneyAccount::class)->findBy(['company' => $company]);
            $accountIds = array_map(static fn (MoneyAccount $a) => $a->getId(), $all);
        }

        $output->writeln(sprintf(
            '<info>Пересчёт дневных остатков: компания=%s, период=%s..%s, счетов=%d</info>',
            $company->getName() ?? $company->getId(),
            $from->format('Y-m-d'),
            $to->format('Y-m-d'),
            count($accountIds)
        ));

        $this->recalculator->recalc($company, $from, $to, $accountIds, $output);

        $output->writeln('<info>Готово.</info>');
        return Command::SUCCESS;
    }
}
