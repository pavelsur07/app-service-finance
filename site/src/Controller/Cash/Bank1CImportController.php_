<?php

namespace App\Controller\Cash;

use App\Repository\MoneyAccountRepository;
use App\Service\AccountMasker;
use App\Service\ActiveCompanyService;
use App\Service\Import\ClientBank1CImportService;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\StreamedResponse;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\User\UserInterface;

#[Route('/cash/import/bank1c')]
class Bank1CImportController extends AbstractController
{
    public function __construct(
        private readonly ActiveCompanyService $activeCompanyService,
        private readonly ClientBank1CImportService $clientBank1CImportService,
        private readonly AccountMasker $accountMasker,
    ) {
    }

    #[Route('', name: 'cash_bank1c_import_upload', methods: ['GET'])]
    public function upload(MoneyAccountRepository $accountRepository): Response
    {
        $company = $this->activeCompanyService->getActiveCompany();
        $accounts = $accountRepository->findBy(['company' => $company]);

        return $this->render('cash/bank1c_import_upload.html.twig', [
            'accounts' => $accounts,
        ]);
    }

    #[Route('/preview', name: 'cash_bank1c_import_preview', methods: ['GET', 'POST'])]
    public function preview(Request $request, MoneyAccountRepository $accountRepository): Response
    {
        $session = $request->getSession();

        if ($request->isMethod('POST')) {
            if (!$this->isCsrfTokenValid('bank1c_import_upload', (string) $request->request->get('_token'))) {
                throw $this->createAccessDeniedException();
            }

            $uploadedFile = $request->files->get('import_file');
            if (!$uploadedFile instanceof UploadedFile) {
                $this->addFlash('danger', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.');

                return $this->redirectToRoute('cash_bank1c_import_upload');
            }

            $accountId = (string) $request->request->get('money_account_id');
            if ('' === $accountId) {
                $this->addFlash('danger', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç.');

                return $this->redirectToRoute('cash_bank1c_import_upload');
            }

            $company = $this->activeCompanyService->getActiveCompany();
            $selectedAccount = $accountRepository->find($accountId);
            if (null === $selectedAccount || $selectedAccount->getCompany() !== $company) {
                $this->addFlash('danger', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');

                return $this->redirectToRoute('cash_bank1c_import_upload');
            }

            $rawContent = file_get_contents($uploadedFile->getPathname());
            if (false === $rawContent) {
                $this->addFlash('danger', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏–º–ø–æ—Ä—Ç–∞.');

                return $this->redirectToRoute('cash_bank1c_import_upload');
            }

            $content = $this->normalizeEncoding($rawContent);

            $parsedData = $this->clientBank1CImportService->parseHeaderAndDocuments($content);
            $statementAccountValue = $parsedData['header']['–†–∞—Å—á–°—á–µ—Ç'] ?? null;
            $statementPeriodStart = $parsedData['header']['–î–∞—Ç–∞–ù–∞—á–∞–ª–∞'] ?? null;
            $statementPeriodEnd = $parsedData['header']['–î–∞—Ç–∞–ö–æ–Ω—Ü–∞'] ?? null;
            $statementAccount = is_string($statementAccountValue) ? $statementAccountValue : null;

            $statementAccountNormalized = $this->normalizeAccountNumber($statementAccount);
            $selectedAccountNormalized = $this->normalizeAccountNumber($selectedAccount->getAccountNumber());

            if (
                null === $statementAccountNormalized
                || null === $selectedAccountNormalized
                || $statementAccountNormalized !== $selectedAccountNormalized
            ) {
                $this->addFlash(
                    'danger',
                    sprintf(
                        '–í—ã–±—Ä–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –±–∞–Ω–∫ –∏–ª–∏ –≤—ã–ø–∏—Å–∫–∞: –≤ —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω —Å—á—ë—Ç %s',
                        $statementAccount ?? '–Ω–µ —É–∫–∞–∑–∞–Ω',
                    ),
                );

                return $this->redirectToRoute('cash_bank1c_import_upload');
            }

            $documents = is_array($parsedData['documents']) ? $parsedData['documents'] : [];
            $preview = $this->clientBank1CImportService->buildPreview($documents, $statementAccount);

            $session->set('bank1c_import', [
                'file_name' => $uploadedFile->getClientOriginalName(),
                'account_id' => $selectedAccount->getId(),
                'statement_account' => $statementAccount,
                'statement_period_start' => is_string($statementPeriodStart) ? $statementPeriodStart : null,
                'statement_period_end' => is_string($statementPeriodEnd) ? $statementPeriodEnd : null,
                'preview' => $preview,
            ]);
        }
        // üîë –í–ê–ñ–ù–û: PRG ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º POST —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –Ω–∞ —ç—Ç–æ—Ç –∂–µ —Ä–æ—É—Ç (GET)
        // ... –≤–Ω—É—Ç—Ä–∏ –≤–µ—Ç–∫–∏ POST –í –°–ê–ú–û–ú –ö–û–ù–¶–ï, –ø–æ—Å–ª–µ $session->set(...)
        $url = $this->generateUrl(
            'cash_bank1c_import_preview',
            ['visit' => '1'], // üëà –º–µ–Ω—è–µ–º URL (–Ω–µ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π)
            UrlGeneratorInterface::ABSOLUTE_URL // üëà –∞–±—Å–æ–ª—é—Ç–Ω—ã–π https
        );

        // 303 ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
        return $this->redirect($url, 303);

        $state = $session->get('bank1c_import');
        if (!is_array($state) || !isset($state['preview'], $state['account_id'])) {
            $this->addFlash('danger', '–°–µ—Å—Å–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $company = $this->activeCompanyService->getActiveCompany();
        $selectedAccount = null;
        if (is_string($state['account_id'])) {
            $selectedAccount = $accountRepository->find($state['account_id']);
        }

        if (null === $selectedAccount || $selectedAccount->getCompany() !== $company) {
            $this->addFlash('danger', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $preview = is_array($state['preview']) ? $state['preview'] : [];
        $totalRows = count($preview);
        $perPage = 100;
        $page = max(1, (int) $request->query->get('page', 1));
        $pages = (int) ceil($totalRows / $perPage);
        if ($pages < 1) {
            $pages = 1;
        }

        if ($page > $pages) {
            $page = $pages;
        }

        $offset = ($page - 1) * $perPage;
        $previewRows = array_slice($preview, $offset, $perPage);

        $pager = null;
        if ($totalRows > $perPage) {
            $pager = [
                'current' => $page,
                'pages' => $pages,
                'hasPrevious' => $page > 1,
                'hasNext' => $page < $pages,
                'previous' => max(1, $page - 1),
                'next' => min($pages, $page + 1),
            ];
        }

        return $this->render('cash/bank1c_import_preview.html.twig', [
            'filename' => is_string($state['file_name'] ?? null) ? $state['file_name'] : null,
            'selectedAccount' => $selectedAccount,
            'previewRows' => $previewRows,
            'pager' => $pager,
            'totalRows' => $totalRows,
        ]);
    }

    #[Route('/preview/csv', name: 'cash_bank1c_import_preview_csv', methods: ['GET'])]
    public function downloadPreviewCsv(Request $request, MoneyAccountRepository $accountRepository): Response
    {
        $session = $request->getSession();
        $state = $session->get('bank1c_import');

        if (!is_array($state) || !isset($state['preview'], $state['account_id'])) {
            $this->addFlash('danger', '–°–µ—Å—Å–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $company = $this->activeCompanyService->getActiveCompany();
        $account = null;
        if (is_string($state['account_id'])) {
            $account = $accountRepository->find($state['account_id']);
        }

        if (null === $account || $account->getCompany() !== $company) {
            $this->addFlash('danger', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $preview = is_array($state['preview']) ? $state['preview'] : [];
        $fileName = is_string($state['file_name'] ?? null) ? $state['file_name'] : 'bank1c';

        $response = new StreamedResponse(function () use ($preview) {
            $handle = fopen('php://output', 'w');
            if (false === $handle) {
                return;
            }

            fwrite($handle, "\xEF\xBB\xBF");
            fputcsv($handle, [
                '–î–∞—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                '–¢–∏–ø –¥–≤–∏–∂–µ–Ω–∏—è',
                '–°—É–º–º–∞',
                '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
                '–ü–ª–∞—Ç–µ–ª—å—â–∏–∫',
                '–ò–ù–ù –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞',
                '–°—á—ë—Ç –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞',
                '–ü–æ–ª—É—á–∞—Ç–µ–ª—å',
                '–ò–ù–ù –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
                '–°—á—ë—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
                '–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞',
            ], ';');

            foreach ($preview as $row) {
                if (!is_array($row)) {
                    continue;
                }

                $direction = (string) ($row['direction'] ?? '');
                $amount = $row['amount'] ?? null;
                $amountValue = null;
                if (null !== $amount && is_numeric($amount)) {
                    $amountNumber = (float) $amount;
                    $sign = 'outflow' === $direction ? '-' : ('inflow' === $direction ? '+' : '');
                    $amountValue = $sign.number_format(abs($amountNumber), 2, '.', '');
                }

                fputcsv($handle, [
                    (string) ($row['docDate'] ?? ''),
                    (string) ($row['docType'] ?? ''),
                    (string) ($row['docNumber'] ?? ''),
                    $direction,
                    $amountValue ?? '',
                    (string) ($row['purpose'] ?? ''),
                    (string) ($row['payerName'] ?? ''),
                    (string) ($row['payerInn'] ?? ''),
                    $this->accountMasker->mask(is_string($row['payerAccount'] ?? null) ? $row['payerAccount'] : null),
                    (string) ($row['receiverName'] ?? ''),
                    (string) ($row['receiverInn'] ?? ''),
                    $this->accountMasker->mask(is_string($row['receiverAccount'] ?? null) ? $row['receiverAccount'] : null),
                    (string) ($row['counterpartyStatus'] ?? ''),
                ], ';');
            }

            fclose($handle);
        });

        $downloadName = $this->generateDownloadName($fileName);
        $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');
        $response->headers->set('Content-Disposition', 'attachment; filename="'.$downloadName.'"');

        return $response;
    }

    #[Route('/commit', name: 'cash_bank1c_import_commit', methods: ['POST'])]
    public function commit(Request $request, MoneyAccountRepository $accountRepository): Response
    {
        if (!$this->isCsrfTokenValid('bank1c_import_commit', (string) $request->request->get('_token'))) {
            throw $this->createAccessDeniedException();
        }

        $session = $request->getSession();
        $state = $session->get('bank1c_import');

        if (!is_array($state) || !isset($state['preview'], $state['account_id'])) {
            $this->addFlash('danger', '–°–µ—Å—Å–∏—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $preview = $state['preview'];
        if (!is_array($preview)) {
            $this->addFlash('danger', '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $company = $this->activeCompanyService->getActiveCompany();
        $account = null;
        if (is_string($state['account_id'])) {
            $account = $accountRepository->find($state['account_id']);
        }

        if (null === $account || $account->getCompany() !== $company) {
            $this->addFlash('danger', '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á—ë—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞.');

            return $this->redirectToRoute('cash_bank1c_import_upload');
        }

        $overwrite = $request->request->getBoolean('overwrite_duplicates', false);

        $user = $this->getUser();
        $userIdentifier = null;
        if ($user instanceof UserInterface) {
            $userIdentifier = $user->getUserIdentifier();
        } elseif (is_string($user)) {
            $userIdentifier = $user;
        }

        $fileName = is_string($state['file_name'] ?? null) ? $state['file_name'] : null;
        $statementAccount = is_string($state['statement_account'] ?? null) ? $state['statement_account'] : null;
        $periodStart = is_string($state['statement_period_start'] ?? null) ? $state['statement_period_start'] : null;
        $periodEnd = is_string($state['statement_period_end'] ?? null) ? $state['statement_period_end'] : null;

        $summary = $this->clientBank1CImportService->import($preview, $account, $overwrite, [
            'user' => $userIdentifier,
            'file' => $fileName,
            'statement_account' => $statementAccount,
            'date_start' => $periodStart,
            'date_end' => $periodEnd,
        ]);

        $session->remove('bank1c_import');

        return $this->render('cash/bank1c_import_result.html.twig', [
            'filename' => $fileName,
            'selectedAccount' => $account,
            'summary' => $summary,
        ]);
    }

    private function normalizeAccountNumber(?string $accountNumber): ?string
    {
        if (null === $accountNumber) {
            return null;
        }

        $normalized = preg_replace('/[^0-9]/', '', $accountNumber);
        if (null === $normalized || '' === $normalized) {
            return null;
        }

        return $normalized;
    }

    private function generateDownloadName(string $originalFileName): string
    {
        $baseName = pathinfo($originalFileName, \PATHINFO_FILENAME);
        $sanitized = preg_replace('/[^A-Za-z0-9\-_]+/', '_', (string) $baseName);
        if (null === $sanitized || '' === $sanitized) {
            $sanitized = 'bank1c';
        }

        return rtrim($sanitized, '_').'_preview.csv';
    }

    private function normalizeEncoding(string $rawContent): string
    {
        $encodingCandidates = ['UTF-8', 'Windows-1251', 'CP1251'];
        $detectedEncoding = mb_detect_encoding($rawContent, $encodingCandidates, true);

        if ('UTF-8' === $detectedEncoding) {
            $content = $rawContent;
        } else {
            $sourceEncoding = $detectedEncoding ?: 'CP1251';
            $converted = @mb_convert_encoding($rawContent, 'UTF-8', $sourceEncoding);
            $content = false !== $converted ? $converted : mb_convert_encoding($rawContent, 'UTF-8', 'CP1251');
        }

        if (str_starts_with($content, "\xEF\xBB\xBF")) {
            $content = substr($content, 3);
        }

        return $content;
    }
}
